@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {
    $max: map-get($breakpoints, $name);
    @return if($max and $max > 0, $max - 0.02, null);
}

@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {
    $min: map-get($breakpoints, $name);
    @return if($min !=0, $min, null);
}

@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {
    @return if(breakpoint-min($name, $breakpoints)==null, "", "-#{$name}");
}

@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {
    $min: breakpoint-min($name, $breakpoints);

    @if $min {
        @media (min-width: $min) {
            @content;
        }
    }

    @else {
        @content;
    }
}

@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {
    $max: breakpoint-max($name, $breakpoints);

    @if $max {
        @media (max-width: $max) {
            @content;
        }
    }

    @else {
        @content;
    }
}

@mixin make-col-ready() {
    box-sizing: border-box;
    flex-shrink: 0;
    width: 100%;
    max-width: 100%;
    padding-right: calc(var(--gutter-x) * 0.5);
    padding-left: calc(var(--gutter-x) * 0.5);
    margin-top: var(--gutter-y);
}

@mixin make-col($size: false, $columns: $grid-columns) {
    @if $size {
        flex: 0 0 auto;
        width: calc(($size * 100%) / $columns)
    }

    @else {
        flex: 1 1 0;
        max-width: 100%;
    }
}

@mixin make-col-offset($size: false, $columns: $grid-columns) {
    margin-left: calc(($size * 100%) / $columns)
}

@mixin make-grid-columns($columns: $grid-columns,
    $gutter: $grid-gutter-width,
    $breakpoints: $grid-breakpoints ) {
    @each $breakpoint in map-keys($breakpoints) {
        $infix: breakpoint-infix($breakpoint, $breakpoints);

        @include media-breakpoint-up($breakpoint, $breakpoints) {
            @if $columns >0 {
                @for $i from 1 through $columns {
                    .col-#{$i}#{$infix} {
                        @include make-col($i, $columns);
                    }
                }

                @for $i from 0 through ($columns - 1) {
                    @if not($infix =="" and $i ==0) {
                        .offset-#{$i}#{$infix} {
                            @include make-col-offset($i, $columns);
                        }
                    }
                }
            }

            //
        }
    }
}

.row {
    --gutter-x: #{$grid-gutter-width};
    --gutter-y: 0;
    display: flex;
    flex-wrap: wrap;
    margin-top: calc(-1 * var(--gutter-y));
    margin-right: calc(-0.5 * var(--gutter-x));
    margin-left: calc(-0.5 * var(--gutter-x));

    >* {
        @include make-col-ready();
    }
}

// Gutters
// Make use of .g-*, .gx-* or .gy-* utilities to change spacing between the columns.

@each $key,
$value in $gutters {

    .g-#{$key},
    .gx-#{$key} {
        --gutter-x: #{$value};
    }

    .g-#{$key},
    .gy-#{$key} {
        --gutter-y: #{$value};
    }
}

@for $i from 1 through $grid-columns {
    .col-#{$i} {
        @include make-col($i, $grid-columns);
    }
}

@for $i from 0 through ($grid-columns - 1) {
    .offset-#{$i} {
        @include make-col-offset($i, $grid-columns);
    }
}

@include make-grid-columns();